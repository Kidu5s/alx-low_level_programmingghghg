!<arch>
0-isupper.c/    0           0     0     644     214       `
#include "main.h"
/**
 * _isupper - checks if c is upper case
 * @c: is The character
 * Return: 1 if true 0 if false
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
		return (0);
}
0-memset.c/     0           0     0     644     259       `
#include "main.h"
#include <string.h>

/**
 * _memset - fills the memory with a constant byte.
 * @s: is a pointer
 * @b: is a character
 * @n: is an integer
 *
 * Return: s
 */

char *_memset(char *s, char b, unsigned int n)
{

	return (memset(s, b, n));

}

0-strcat.c/     0           0     0     644     226       `
#include "main.h"
#include <string.h>

/**
 * _strcat - concatinates the string
 * @dest: the string 1
 * @src: the string 2
 *
 * Return: dest
 */

char *_strcat(char *dest, char *src)
{
	strcat(dest, src);
	return (dest);
}
100-atoi.c/     0           0     0     644     149       `
#include "main.h"

/**
 * _atoi - changing string to number
 * @s: the string
 *
 * Return: Return Integer.
 */
int _atoi(char *s)
{
		return (0);
}

1-isdigit.c/    0           0     0     644     232       `
#include "main.h"

/**
 * _isdigit - checks if it is a number between 0 and 9
 * @c: is the input
 * Return: 1 if it is true 0 if false
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     260       `
#include "main.h"
#include <string.h>

/**
 * _memcpy - copies memory area to memory area
 * @dest: a pointer
 * @src: a pointer
 * @n: is integer
 *
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	return (memcpy(dest, src, n));
}
1-strncat.c/    0           0     0     644     267       `
#include "main.h"
#include <string.h>

/**
 * _strncat - concatenates the string
 * @dest: the first string
 * @src: the second string
 * @n: the n times
 *
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n)
{
	strncat(dest, src, n);
	return (dest);
}

2-strchr.c/     0           0     0     644     259       `
#include "main.h"
#include <string.h>

/**
 * _strchr - locates a char in a string
 * @s: pointer
 * @c: a character
 * Return: c if  found null if not
 */
char *_strchr(char *s, char c)
{
	if (s != NULL)
	{
	return (strchr(s, c));
	}
	else
	return (NULL);
}

2-strlen.c/     0           0     0     644     239       `
#include "main.h"
#include <string.h>

/**
 * _strlen - returns the length of a string
 * @s: the string
 *
 * Return: strlen
 */

int _strlen(char *s)
{
	int length;

	length = 0;

	while (s[length])
	{
		length++;
	}
	return (length);
}

2-strncpy.c/    0           0     0     644     261       `
#include "main.h"
#include <string.h>

/**
 * _strncpy - copys teh string
 * @dest: the first string
 * @src: the second string
 * @n: n times copy
 *
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	strncpy(dest, src, n);
	return (dest);
}

3-islower.c/    0           0     0     644     213       `
#include "main.h"

/**
 * _islower - checks for lower case
 * @c: The character to print
 *
 * Return: 0 if false 1 if true
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
		return (0);
}

3-puts.c/       0           0     0     644     236       `
#include "main.h"
#include <stdio.h>
/**
 * _puts - desplays string
 * @str: is the string
 *
 * Return: a string
 */

void _puts(char *str)
{
	int i;

	i = 0;
	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     246       `
#include "main.h"
#include <string.h>

/**
 * _strcmp - compares strings
 * @s1: the first string
 * @s2: the second string
 *
 * Return: -15 if not true, 15 if true, 0 if equal
 */

int _strcmp(char *s1, char *s2)
{
	return (strcmp(s1, s2));
}

3-strspn.c/     0           0     0     644     225       `
#include "main.h"
#include <string.h>

/**
 * _strspn - gets the length of prefix
 * @s: pointer
 * @accept: pointer
 * Return: the num of byte
 */
unsigned int _strspn(char *s, char *accept)
{
	return (strspn(s, accept));
}

4-isalpha.c/    0           0     0     644     256       `
#include "main.h"

/**
 * _isalpha - prints the checks the lower or upper
 * @c: the cahracter to print
 *
 * Return: 1 if true 0 if false
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
		return (0);
}
4-strpbrk.c/    0           0     0     644     299       `
#include "main.h"
#include <string.h>

/**
 * _strpbrk - searchs a string for any of a set of bytes
 * @s: pointer
 * @accept: pointer
 *
 * Return: accept if found null if not
 */
char *_strpbrk(char *s, char *accept)
{
	if (s != NULL)
	{
		return (strpbrk(s, accept));
	}
	else
		return (NULL);
}

5-strstr.c/     0           0     0     644     312       `
#include "main.h"
#include <string.h>

/**
 * _strstr - locates a substring
 * @haystack: pointer
 * @needle: pointer
 * Return: begginning of the located sub NUll if not
 */
char *_strstr(char *haystack, char *needle)
{
	if (haystack != NULL)
	{
		return (strstr(haystack, needle));
	}
	else
		return (NULL);
}
6-abs.c/        0           0     0     644     194       `
#include "main.h"

/**
 * _abs - prints the absolute value
 * @i: where you put the numbers
 *
 * Return: always 0
 */
int _abs(int i)
{
	if (i < 0)
	{
		return (i = i * -1);
	}
		return (i);
}
9-strcpy.c/     0           0     0     644     249       `
#include "main.h"

/**
* _strcpy - copy the string
* @dest: the first string
* @src: the second string
*
* Return: dest
*/
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}
